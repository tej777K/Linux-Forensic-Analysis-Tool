"""
File: detect_malware.py
Authors:
    - Hemanth Kumar S
    - Nandish H R
    - Harshitha S M
"""
import os
import time
import subprocess
import sys
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import logging
from logging.handlers import RotatingFileHandler
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH

# Configure logging
log_file_path = '/var/log/Forensic_Report/malware_detector.log'
os.makedirs(os.path.dirname(log_file_path), exist_ok=True)
logging.getLogger('').handlers = []
handler = RotatingFileHandler(log_file_path, maxBytes=1024*1024, backupCount=5)  # 1 MB per file, keep 5 backup files
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logging.getLogger('').addHandler(handler)
logging.getLogger('').setLevel(logging.INFO)

watch_dir = sys.argv[1]

text_to_append = """Linux Forensic Analysis Report.
Executive Summary
Please find attached a comprehensive report detailing the recent malware detection on your system. Immediate action is advised to prevent further damage or data loss.
Incident Details
"""

def clear_text_file(file_path):
    try:
        with open(file_path, 'w') as file:
            pass  # Do nothing, effectively clearing the file
        logging.info(f"Text file '{file_path}' has been cleared.")
    except IOError as e:
        logging.error(f"Error clearing text file '{file_path}': {e}")

def append_text_to_file(text, file_path):
    try:
        with open(file_path, 'a') as file:
            file.write(text + "\n")  # Add a newline for clarity
        logging.info(f"Text appended to '{file_path}'")
    except IOError as e:
        logging.error(f"Error appending text to '{file_path}': {e}")

def generate_styled_report(input_path, output_path):
    with open(input_path, 'r') as file:
        lines = file.readlines()

    doc = Document()

    # Title
    title = doc.add_heading('Linux Forensic Analysis Report', 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    for run in title.runs:
        run.font.size = Pt(24)  # Make the title bigger

    # Executive Summary
    doc.add_heading('Executive Summary', level=1)
    exec_summary = doc.add_paragraph(
        'Please find attached a comprehensive report detailing the recent malware detection on your system. Immediate action is advised to prevent further damage or data loss.'
    )
    exec_summary.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

    # Incident Details
    doc.add_heading('Incident Details', level=1)

    incident_started = False
    for line in lines:
        stripped_line = line.strip()
        if stripped_line.startswith("/"):  # Path of the infected file
            incident_started = True
        if incident_started:
            p = doc.add_paragraph(stripped_line)
            p.alignment = WD_ALIGN_PARAGRAPH.LEFT

    # End of Report
    doc.add_heading('End of Report', level=1)
    end_report = doc.add_paragraph(
        'This report summarizes the analysis of malware detection within the specified time frame. Please review the details provided above for security assessments and necessary actions.'
    )
    end_report.alignment = WD_ALIGN_PARAGRAPH.LEFT

    # Footer
    section = doc.sections[0]
    footer = section.footer
    footer_paragraph = footer.paragraphs[0] if footer.paragraphs else footer.add_paragraph()
    footer_paragraph.text = "Lhedge-Linux Services"
    footer_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Save the document
    doc.save(output_path)
    logging.info(f"Styled report saved to '{output_path}'")

class MalwareDetector(FileSystemEventHandler):
    def __init__(self, watch_dir):
        super().__init__()
        self.watch_dir = watch_dir
        self.last_modified = {}
        self.debounce_time = 2  # seconds

    def on_modified(self, event):
        self.process_event(event)

    def on_created(self, event):
        self.process_event(event)

    def on_moved(self, event):
        self.process_event(event)

    def on_deleted(self, event):
        self.reset_last_modified(event.src_path)

    def process_event(self, event):
        if event.is_directory:
            return
        file_path = event.src_path
        if os.path.exists(file_path) and self.needs_scan(file_path):
            self.scan_file(file_path)

    def needs_scan(self, file_path):
        if not os.path.exists(file_path):
            return False
        last_modified = os.path.getmtime(file_path)
        if (file_path not in self.last_modified or
            self.last_modified[file_path] < last_modified - self.debounce_time):
            self.last_modified[file_path] = last_modified
            return True
        return False

    def reset_last_modified(self, file_path):
        if file_path in self.last_modified:
            del self.last_modified[file_path]

    def scan_file(self, file_path):
        file_name = os.path.basename(file_path)
        logging.info(f"Scanning file: {file_name}")
        try:
            result = subprocess.run(["clamscan", "--stdout", "-i", file_path],
                                    stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
            if "Infected files: 0" not in result.stdout:
                logging.warning(f"Malware detected in file: {file_name}")
                self.scan_directory(self.watch_dir)
            else:
                logging.info(f"No malware detected in file: {file_name}")
        except Exception as e:
            logging.error(f"Error scanning file '{file_name}': {e}")

    def scan_directory(self, directory):
        logging.info(f"Scanning directory: {directory}")
        try:
            result = subprocess.run(["clamscan", "--stdout", "-r", "-i", directory],
                                    stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
            # Log the scan result
            logging.info(f"Scan result:\n{result.stdout}")                        
            
            append_text_to_file(text_to_append, "malware_report.txt")
            with open("malware_report.txt", "a") as f:
                f.write(result.stdout)
            
            # Generate the styled report
            generate_styled_report("malware_report.txt", "malware_report_styled.docx")
            
            user = sys.argv[2]
            subprocess.run(f"python3 send_mail.py malware {user}", shell=True)
            logging.info("Scanned report is sent to user email")
        except FileNotFoundError:
            logging.error("Error: The script file was not found.")
        except subprocess.CalledProcessError as e:
            logging.error(f"An error occurred while sending the email: {e}")
        except Exception as e:
            logging.error(f"An unexpected error occurred: {e}")
        finally:
            clear_text_file("malware_report.txt")

if __name__ == "__main__":
    detector = MalwareDetector(watch_dir)
    observer = Observer()
    observer.schedule(detector, path=watch_dir, recursive=True)
    observer.start()

    logging.info(f"Monitoring directory: {watch_dir}")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
